package config

import (
	"crypto/rand"
	"crypto/sha256"
	"crypto/tls"
	"fmt"
	"os"
	"path/filepath"
	"strconv"

	"github.com/ddvk/rmfakecloud/internal/email"
	log "github.com/sirupsen/logrus"
	"golang.org/x/crypto/pbkdf2"
)

const (
	// DefaultPort the default port
	DefaultPort = "3000"
	// DefaultDataDir default folder for storage
	DefaultDataDir = "data"

	ReadStorageExpirationInMinutes  = 5
	WriteStorageExpirationInMinutes = 5

	// DefaultHost fake url
	DefaultHost = "local.appspot.com"

	// EnvLogLevel environment variable for the log level
	EnvLogLevel = "LOGLEVEL"
	// envDataDir
	envDataDir    = "DATADIR"
	envPort       = "PORT"
	envStorageURL = "STORAGE_URL"
	EnvTLSCert    = "TLS_CERT"
	EnvTLSKey     = "TLS_KEY"

	// auth
	envJWTSecretKey     = "JWT_SECRET_KEY"
	envRegistrationOpen = "OPEN_REGISTRATION"

	// EnvSMTPServer the mail server
	EnvSMTPServer = "RM_SMTP_SERVER"
	// EnvSMTPUsername the username for the mail server
	EnvSMTPUsername = "RM_SMTP_USERNAME"
	// EnvSMTPPassword pass
	EnvSMTPPassword = "RM_SMTP_PASSWORD"
	// EnvSMTPHelo custom helo
	EnvSMTPHelo = "RM_SMTP_HELO"
	// EnvSMTPInsecureTLS dont check cert (bad)
	EnvSMTPInsecureTLS = "RM_SMTP_INSECURE_TLS"
	// EnvSMTPFrom custom from address
	EnvSMTPFrom = "RM_SMTP_FROM"

	// EnvHwrApplicationKey the myScript application key
	EnvHwrApplicationKey = "RMAPI_HWR_APPLICATIONKEY"
	// EnvHwrHmac myScript hmac key
	EnvHwrHmac = "RMAPI_HWR_HMAC"
)

// Config config
type Config struct {
	Port             string
	StorageURL       string
	DataDir          string
	RegistrationOpen bool
	CreateFirstUser  bool
	JWTSecretKey     []byte
	JWTRandom        bool
	Certificate      tls.Certificate
	SmtpConfig       *email.SmtpConfig
}

func (cfg *Config) Verify() {

	if cfg.SmtpConfig == nil {
		log.Warnln("smtp not configured, no emails will be sent")
	}

	if cfg.JWTRandom {
		log.Warnf("%s was not set! You have to set this variable in order for the Authentication to work, the following was autogenerated", envJWTSecretKey)
		log.Warnf("%s=%X", envJWTSecretKey, cfg.JWTSecretKey)
		log.Warn("The authentication will fail, the next time you start the server")
	}
}

// FromEnv config from environment values
func FromEnv() *Config {
	var err error
	var dataDir string
	data := os.Getenv(envDataDir)
	if data != "" {
		dataDir = data
	} else {
		dataDir, err = filepath.Abs(DefaultDataDir)
		if err != nil {
			log.Fatal("DataDir: ", err)
		}
	}

	port := os.Getenv(envPort)
	if port == "" {
		port = DefaultPort
	}

	jwtGenerated := false
	jwtSecretKey := []byte(os.Getenv(envJWTSecretKey))
	if len(jwtSecretKey) == 0 {
		jwtSecretKey = make([]byte, 32)
		_, err := rand.Read(jwtSecretKey)
		if err != nil {
			log.Fatal(err)
		}
		jwtGenerated = true
	}
	dk := pbkdf2.Key(jwtSecretKey, []byte("todo some salt"), 10000, 32, sha256.New)

	var cert tls.Certificate
	certPath := os.Getenv(EnvTLSCert)
	keyPath := os.Getenv(EnvTLSKey)
	hasCert := false
	if certPath != "" && keyPath != "" {

		cert, err = tls.LoadX509KeyPair(certPath, keyPath)
		if err != nil {
			log.Fatal("unable to load certificate:", err)
		}
		hasCert = true
	}
	openRegistration, _ := strconv.ParseBool(os.Getenv(envRegistrationOpen))

	uploadURL := os.Getenv(envStorageURL)
	if uploadURL == "" {
		host, err := os.Hostname()
		if err != nil {
			log.Warn("cannot get hostname")
			host = DefaultHost
		}
		prefix := "http"
		if hasCert {
			prefix = "https"
		}
		uploadURL = fmt.Sprintf("%s://%s:%s", prefix, host, port)
	}

	// smtp
	var smtpCfg *email.SmtpConfig
	servername := os.Getenv(EnvSMTPServer)

	if servername != "" {
		inSecureTLS, _ := strconv.ParseBool(os.Getenv(EnvSMTPInsecureTLS))
		smtpCfg = &email.SmtpConfig{
			Server:       servername,
			Username:     os.Getenv(EnvSMTPUsername),
			Password:     os.Getenv(EnvSMTPPassword),
			Helo:         os.Getenv(EnvSMTPHelo),
			InsecureTLS:  inSecureTLS,
			FromOverride: os.Getenv(EnvSMTPFrom),
		}
	}

	cfg := Config{
		Port:             port,
		StorageURL:       uploadURL,
		DataDir:          dataDir,
		JWTSecretKey:     dk,
		JWTRandom:        jwtGenerated,
		Certificate:      cert,
		RegistrationOpen: openRegistration,
		SmtpConfig:       smtpCfg,
	}
	return &cfg
}

// EnvVars env vars usage
func EnvVars() string {
	return fmt.Sprintf(`
Environment Variables:

General:
	%s	secret for signgin JWT tokens
	%s	Log verbosity level (debug, info, warn) (default: info)
	%s		Port (default: %s)
	%s		Local storage folder (default: %s)
	%s	Url the tablet can resolve (default: http(s)://hostname:port)
	%s	Path to the server certificate.
	%s	Path to the server certificate key.

email sending, smtp:
	%s
	%s
	%s
	%s	don't check the server certificate (not recommended)
	%s	custom HELO (if your email server needs it)
	%s	override the email's From:

myScript hwr (needs a developer account):
	%s
	%s
`,
		envJWTSecretKey,
		EnvLogLevel,
		envPort,
		DefaultPort,
		envDataDir,
		DefaultDataDir,
		envStorageURL,
		EnvTLSCert,
		EnvTLSKey,

		EnvSMTPServer,
		EnvSMTPUsername,
		EnvSMTPPassword,
		EnvSMTPInsecureTLS,
		EnvSMTPHelo,
		EnvSMTPFrom,

		EnvHwrApplicationKey,
		EnvHwrHmac,
	)
}
